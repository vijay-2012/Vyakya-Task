# -*- coding: utf-8 -*-
"""Task1Vyakya

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bJWZtPymmakzdXnDcMbSO7c_5WdCgEeh
"""

import pandas as pd
import re

jsonList = pd.read_json('/content/task_input_list.json')

df = jsonList[0]

for i in range(len(jsonList[0])):
  if jsonList[0][i] == 'Deposits and other additions':
    DepositIndex = i+1
  if jsonList[0][i] == 'Other subtractions':
    withdrawalIndex = i+1
  if jsonList[0][i]=='Total other subtractions':
    withdrawalend= i

columns = [jsonList[0][i] for i in range(DepositIndex,DepositIndex+3)]
columns

def transaction(df, start, end):

  import re
  def check_date(date_):
    
    if re.match('\d{2}(?P<sep>[-/])\d{2}(?P=sep)\d{2}',date_):
      return True
    else:
      return False

  def check_amount(amt):
  
    try:
      if ',' in amt:
        idx = amt.index(',')
        amt = amt[0:idx] + amt[(idx+1):]   
        
      if float(amt):
        return float(amt)
      
    except:
      return False

  def check_description(desc):
    
    if not check_amount(desc) and not check_date(desc):
      return True

  def parse_data(df, start, end):
    date= []
    day=[]
    month=[]
    year=[]
    amountList =[]
    desc = []
    for i in range(start,end):
 
      if check_date(df[i]):

        date.append(df[i])
        d = df[i].split('/')
        day.append(d[1])
        month.append(d[0])
        year.append(int(d[2])+2000)
      amount = check_amount(df[i])

      if amount:
        
        amountList.append(amount)

      if check_description(df[i]):
       
        if check_description(df[i-1]):
          desc[-1] += ' ' + df[i]
        else:
          desc.append(df[i])

    res = pd.DataFrame(columns=['DATE','DESCRIPTION','AMOUNT','DAY','MONTH','YEAR'])

    res['DATE'] = date
    res['DESCRIPTION'] = desc
    res['AMOUNT'] = amountList
    res['DAY'] = day
    res['MONTH'] = month
    res['YEAR'] = year

    
   
    return res
  result = parse_data(df, start, end)
  return result

deposits = transaction(df, DepositIndex + 3, withdrawalIndex - 4)

print(deposits)

withdrawals = transaction(df, withdrawalIndex + 3, withdrawalend)

withdrawals

def insights(df, deposits, withdrawals):
  def check_website(text):
    pattern = r'[0-9a-z]{0,61}\.[a-z]{2,4}$'
    if re.match(pattern, text):
      return True
    else:
      return False

  def check_email(email):
  
    pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    if re.match(pattern, email):
      return True
    else:
      return False

  def check_phno(number):
    pattern = r"^[1]*[-]*[(]*[0-9]{3}[)]*[-]*[ ]*[0-9]{3}[-]*[0-9]{4}"
    if re.match(pattern, number):
      return True
    else:
      return False

  def parse_data(df, deposits, withdrawals):
    phone_number=[]
    emailList = []
    website = []

    for i in range(len(df)):
      if ": " in df[i]:
        ph = df[i].split(": ")[1]
        
        if check_phno(ph):
          phone_number.append(ph)

      if check_email(df[i]):
        emailList.append(df[i])
      if check_website(df[i]):
        website.append(df[i]) 


    

    phone = ','.join(phone_number) if phone_number else 'NA'
    emailIds = ','.join(emailList) if emailList else 'NA'
    websites = ','.join(website) if website else 'NA'
    maxAmount = max(map(max,[deposits['AMOUNT'],withdrawals['AMOUNT']]))
    minAmount = min(map(min,[deposits['AMOUNT'],withdrawals['AMOUNT']]))

    res = pd.DataFrame(columns=['Key',"Value"])
    res['Key'] = ['website', 'email', 'phone_numbers', 'max amount', 'min amount']
    res['Value'] = [websites, emailIds, phone, maxAmount, minAmount]
    
    return res

  result = parse_data(df, deposits, withdrawals)
  return result

insights = insights(df, deposits, withdrawals)

insights

with pd.ExcelWriter('task_2_output.xlsx') as writer:  
    deposits.to_excel(writer, sheet_name='DEPOSITS', index=False)
    withdrawals.to_excel(writer, sheet_name='WITHDRAWALS', index=False)
    insights.to_excel(writer, sheet_name='INSIGHTS', index=False)

